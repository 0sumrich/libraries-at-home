{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","lightBlue","secondary","blueGrey","overrides","MuiButton","text","textTransform","MuiTab","root","useStyles","makeStyles","button","margin","spacing","content","flexGrow","padding","title","App","classes","ThemeProvider","className","CssBaseline","Container","maxWidth","Typography","color","variant","component","AppBar","position","elevation","Toolbar","Button","size","Link","to","onClick","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oWAiBMA,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAASC,IACTC,UAAWC,KAEbC,UAAW,CACTC,UAAW,CACTC,KAAM,CACJC,cAAe,SAGnBC,OAAQ,CACNC,KAAM,CACJF,cAAe,YAMjBG,EAAYC,aAAW,SAACd,GAAD,MAAY,CACvCe,OAAQ,CACNC,OAAQhB,EAAMiB,QAAQ,IAExBC,QAAS,CACPC,SAAU,EACVC,QAASpB,EAAMiB,QAAQ,IAEzBL,KAAM,CACJO,SAAU,GAEZE,MAAO,CACLL,OAAQhB,EAAMiB,QAAQ,QA2CXK,MAvCf,WAEE,IAAMC,EAAUV,IAEhB,OACE,kBAACW,EAAA,EAAD,CAAexB,MAAOA,GACpB,kBAAC,IAAD,KACE,yBAAKyB,UAAWF,EAAQX,MACtB,kBAACc,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAYC,MAAM,YAAYC,QAAQ,KAAKC,UAAU,KAAKP,UAAWF,EAAQF,OAA7E,sBAEF,kBAACY,EAAA,EAAD,CAAQC,SAAS,SAASJ,MAAM,UAAUK,UAAW,GACnD,kBAACR,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQb,UAAWF,EAAQR,OAAQiB,UAAWO,IAAMC,GAAG,IAAIV,MAAM,UAAUW,QAAS,cAAjG,UACA,kBAACJ,EAAA,EAAD,CAAQC,KAAK,QAAQN,UAAWO,IAAMC,GAAG,SAASV,MAAM,UAAUW,QAAS,cAA3E,SACA,kBAACJ,EAAA,EAAD,CAAQC,KAAK,QAAQN,UAAWO,IAAMC,GAAG,SAASV,MAAM,UAAUW,QAAS,cAA3E,WAKN,kBAACd,EAAA,EAAD,CAAWC,SAAS,MAClB,0BAAMH,UAAWF,EAAQL,SACvB,kBAAC,IAAD,CACEwB,KAAK,IACLC,OAAK,EACLC,OAAQ,WACN,OAAO,8CCpELC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.76b3a262.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { BrowserRouter, Link, Route } from \"react-router-dom\";\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport lightBlue from '@material-ui/core/colors/lightBlue';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: lightBlue,\r\n    secondary: blueGrey\r\n  },\r\n  overrides: {\r\n    MuiButton: {\r\n      text: {\r\n        textTransform: 'none'\r\n      }\r\n    },\r\n    MuiTab: {\r\n      root: {\r\n        textTransform: 'none'\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(2)\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3)\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    margin: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nfunction App() {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <BrowserRouter>\r\n        <div className={classes.root}>\r\n          <CssBaseline />\r\n          <Container maxWidth=\"lg\">\r\n            <Typography color=\"secondary\" variant=\"h4\" component=\"h1\" className={classes.title}>Libraries at home</Typography>\r\n          </Container>\r\n          <AppBar position=\"static\" color=\"default\" elevation={0}>\r\n            <Container maxWidth=\"lg\">\r\n              <Toolbar>\r\n                <Button size=\"large\" className={classes.button} component={Link} to=\"/\" color=\"primary\" onClick={() => { }}>Search</Button>\r\n                <Button size=\"large\" component={Link} to=\"/watch\" color=\"primary\" onClick={() => { }}>Watch</Button>\r\n                <Button size=\"large\" component={Link} to=\"/blogs\" color=\"primary\" onClick={() => { }}>Read</Button>\r\n              </Toolbar>\r\n            </Container>\r\n          </AppBar>\r\n\r\n          <Container maxWidth=\"lg\">\r\n            <main className={classes.content}>\r\n              <Route\r\n                path='/'\r\n                exact\r\n                render={() => {\r\n                  return <div>Home</div>\r\n                }}\r\n              />\r\n            </main>\r\n          </Container>\r\n        </div>\r\n      </BrowserRouter>\r\n    </ThemeProvider >\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'typeface-roboto';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}